// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TetaBackend.Domain;

#nullable disable

namespace TetaBackend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241013083501_PhoneAndPasswordNullable")]
    partial class PhoneAndPasswordNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.FriendsCategoryInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("FriendsCategoryInfos");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.LoveCategoryInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MaxAge")
                        .HasColumnType("int");

                    b.Property<int>("MinAge")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("LoveCategoryInfos");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.WorkCategoryInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Income")
                        .HasColumnType("int");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("LookingFor")
                        .HasColumnType("int");

                    b.Property<string>("Skills")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WorkCategoryInfos");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UserALeft")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserBId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("UserBLeft")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserAId");

                    b.HasIndex("UserBId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.GenderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.ImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.LanguageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.LocationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.MatchEntity", b =>
                {
                    b.Property<Guid>("InitiatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMatch")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("InitiatorId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FriendsCategoryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsStripeSubscriptionPaid")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LoveCategoryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeCustomerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("StripeSubscriptionExpiresAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("StripeSubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkCategoryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FriendsCategoryInfoId")
                        .IsUnique()
                        .HasFilter("[FriendsCategoryInfoId] IS NOT NULL");

                    b.HasIndex("LoveCategoryInfoId")
                        .IsUnique()
                        .HasFilter("[LoveCategoryInfoId] IS NOT NULL");

                    b.HasIndex("UserInfoId")
                        .IsUnique()
                        .HasFilter("[UserInfoId] IS NOT NULL");

                    b.HasIndex("WorkCategoryInfoId")
                        .IsUnique()
                        .HasFilter("[WorkCategoryInfoId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserInfoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("Age")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlaceOfBirthId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PlaceOfBirthId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserInfoLanguageEntity", b =>
                {
                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("UserInfoId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserInfoLanguages");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.FriendsCategoryInfoEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.CategoryInfo.FriendsCategoryInfoEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.LoveCategoryInfoEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.GenderEntity", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.CategoryInfo.LoveCategoryInfoEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.CategoryInfo.WorkCategoryInfoEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.CategoryInfo.WorkCategoryInfoEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.ChatEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "UserA")
                        .WithMany("ChatsA")
                        .HasForeignKey("UserAId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "UserB")
                        .WithMany("ChatsB")
                        .HasForeignKey("UserBId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserA");

                    b.Navigation("UserB");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.ImageEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.UserInfoEntity", "UserInfo")
                        .WithMany("Images")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.MatchEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "Initiator")
                        .WithMany("InitiatedMatches")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "Receiver")
                        .WithMany("ReceivedMatches")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Initiator");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.MessageEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.CategoryInfo.FriendsCategoryInfoEntity", "FriendsCategoryInfo")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.UserEntity", "FriendsCategoryInfoId");

                    b.HasOne("TetaBackend.Domain.Entities.CategoryInfo.LoveCategoryInfoEntity", "LoveCategoryInfo")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.UserEntity", "LoveCategoryInfoId");

                    b.HasOne("TetaBackend.Domain.Entities.UserInfoEntity", "UserInfo")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.UserEntity", "UserInfoId");

                    b.HasOne("TetaBackend.Domain.Entities.CategoryInfo.WorkCategoryInfoEntity", "WorkCategoryInfo")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.UserEntity", "WorkCategoryInfoId");

                    b.Navigation("FriendsCategoryInfo");

                    b.Navigation("LoveCategoryInfo");

                    b.Navigation("UserInfo");

                    b.Navigation("WorkCategoryInfo");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserInfoEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.GenderEntity", "Gender")
                        .WithMany("UserInfoEntities")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.LocationEntity", "Location")
                        .WithMany("UserInfoLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.LocationEntity", "PlaceOfBirth")
                        .WithMany("UserInfoBirthPlaces")
                        .HasForeignKey("PlaceOfBirthId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserEntity", "User")
                        .WithOne()
                        .HasForeignKey("TetaBackend.Domain.Entities.UserInfoEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Location");

                    b.Navigation("PlaceOfBirth");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserInfoLanguageEntity", b =>
                {
                    b.HasOne("TetaBackend.Domain.Entities.LanguageEntity", "Language")
                        .WithMany("UserInfoLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TetaBackend.Domain.Entities.UserInfoEntity", "UserInfo")
                        .WithMany("UserInfoLanguages")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.ChatEntity", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.GenderEntity", b =>
                {
                    b.Navigation("UserInfoEntities");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.LanguageEntity", b =>
                {
                    b.Navigation("UserInfoLanguages");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.LocationEntity", b =>
                {
                    b.Navigation("UserInfoBirthPlaces");

                    b.Navigation("UserInfoLocations");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("ChatsA");

                    b.Navigation("ChatsB");

                    b.Navigation("InitiatedMatches");

                    b.Navigation("ReceivedMatches");
                });

            modelBuilder.Entity("TetaBackend.Domain.Entities.UserInfoEntity", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("UserInfoLanguages");
                });
#pragma warning restore 612, 618
        }
    }
}
